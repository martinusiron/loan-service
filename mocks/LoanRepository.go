// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "github.com/martinusiron/loan-service/domain"

	mock "github.com/stretchr/testify/mock"
)

// LoanRepository is an autogenerated mock type for the LoanRepository type
type LoanRepository struct {
	mock.Mock
}

type LoanRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *LoanRepository) EXPECT() *LoanRepository_Expecter {
	return &LoanRepository_Expecter{mock: &_m.Mock}
}

// CreateLoan provides a mock function with given fields: ctx, loan
func (_m *LoanRepository) CreateLoan(ctx context.Context, loan *domain.Loan) error {
	ret := _m.Called(ctx, loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Loan) error); ok {
		r0 = rf(ctx, loan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanRepository_CreateLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoan'
type LoanRepository_CreateLoan_Call struct {
	*mock.Call
}

// CreateLoan is a helper method to define mock.On call
//   - ctx context.Context
//   - loan *domain.Loan
func (_e *LoanRepository_Expecter) CreateLoan(ctx interface{}, loan interface{}) *LoanRepository_CreateLoan_Call {
	return &LoanRepository_CreateLoan_Call{Call: _e.mock.On("CreateLoan", ctx, loan)}
}

func (_c *LoanRepository_CreateLoan_Call) Run(run func(ctx context.Context, loan *domain.Loan)) *LoanRepository_CreateLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Loan))
	})
	return _c
}

func (_c *LoanRepository_CreateLoan_Call) Return(_a0 error) *LoanRepository_CreateLoan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoanRepository_CreateLoan_Call) RunAndReturn(run func(context.Context, *domain.Loan) error) *LoanRepository_CreateLoan_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanByID provides a mock function with given fields: ctx, id
func (_m *LoanRepository) GetLoanByID(ctx context.Context, id int) (*domain.Loan, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByID")
	}

	var r0 *domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Loan, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Loan); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoanRepository_GetLoanByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanByID'
type LoanRepository_GetLoanByID_Call struct {
	*mock.Call
}

// GetLoanByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *LoanRepository_Expecter) GetLoanByID(ctx interface{}, id interface{}) *LoanRepository_GetLoanByID_Call {
	return &LoanRepository_GetLoanByID_Call{Call: _e.mock.On("GetLoanByID", ctx, id)}
}

func (_c *LoanRepository_GetLoanByID_Call) Run(run func(ctx context.Context, id int)) *LoanRepository_GetLoanByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoanRepository_GetLoanByID_Call) Return(_a0 *domain.Loan, _a1 error) *LoanRepository_GetLoanByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoanRepository_GetLoanByID_Call) RunAndReturn(run func(context.Context, int) (*domain.Loan, error)) *LoanRepository_GetLoanByID_Call {
	_c.Call.Return(run)
	return _c
}

// SetAgreementLink provides a mock function with given fields: ctx, id, link
func (_m *LoanRepository) SetAgreementLink(ctx context.Context, id int, link string) error {
	ret := _m.Called(ctx, id, link)

	if len(ret) == 0 {
		panic("no return value specified for SetAgreementLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, id, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanRepository_SetAgreementLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAgreementLink'
type LoanRepository_SetAgreementLink_Call struct {
	*mock.Call
}

// SetAgreementLink is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - link string
func (_e *LoanRepository_Expecter) SetAgreementLink(ctx interface{}, id interface{}, link interface{}) *LoanRepository_SetAgreementLink_Call {
	return &LoanRepository_SetAgreementLink_Call{Call: _e.mock.On("SetAgreementLink", ctx, id, link)}
}

func (_c *LoanRepository_SetAgreementLink_Call) Run(run func(ctx context.Context, id int, link string)) *LoanRepository_SetAgreementLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *LoanRepository_SetAgreementLink_Call) Return(_a0 error) *LoanRepository_SetAgreementLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoanRepository_SetAgreementLink_Call) RunAndReturn(run func(context.Context, int, string) error) *LoanRepository_SetAgreementLink_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLoanStatus provides a mock function with given fields: ctx, id, status
func (_m *LoanRepository) UpdateLoanStatus(ctx context.Context, id int, status domain.LoanStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoanStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.LoanStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanRepository_UpdateLoanStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLoanStatus'
type LoanRepository_UpdateLoanStatus_Call struct {
	*mock.Call
}

// UpdateLoanStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - status domain.LoanStatus
func (_e *LoanRepository_Expecter) UpdateLoanStatus(ctx interface{}, id interface{}, status interface{}) *LoanRepository_UpdateLoanStatus_Call {
	return &LoanRepository_UpdateLoanStatus_Call{Call: _e.mock.On("UpdateLoanStatus", ctx, id, status)}
}

func (_c *LoanRepository_UpdateLoanStatus_Call) Run(run func(ctx context.Context, id int, status domain.LoanStatus)) *LoanRepository_UpdateLoanStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(domain.LoanStatus))
	})
	return _c
}

func (_c *LoanRepository_UpdateLoanStatus_Call) Return(_a0 error) *LoanRepository_UpdateLoanStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoanRepository_UpdateLoanStatus_Call) RunAndReturn(run func(context.Context, int, domain.LoanStatus) error) *LoanRepository_UpdateLoanStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoanRepository creates a new instance of LoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepository {
	mock := &LoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
