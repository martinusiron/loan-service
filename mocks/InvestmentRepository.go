// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "github.com/martinusiron/loan-service/domain"

	mock "github.com/stretchr/testify/mock"
)

// InvestmentRepository is an autogenerated mock type for the InvestmentRepository type
type InvestmentRepository struct {
	mock.Mock
}

type InvestmentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *InvestmentRepository) EXPECT() *InvestmentRepository_Expecter {
	return &InvestmentRepository_Expecter{mock: &_m.Mock}
}

// AddInvestment provides a mock function with given fields: ctx, i
func (_m *InvestmentRepository) AddInvestment(ctx context.Context, i *domain.Investment) error {
	ret := _m.Called(ctx, i)

	if len(ret) == 0 {
		panic("no return value specified for AddInvestment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Investment) error); ok {
		r0 = rf(ctx, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvestmentRepository_AddInvestment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInvestment'
type InvestmentRepository_AddInvestment_Call struct {
	*mock.Call
}

// AddInvestment is a helper method to define mock.On call
//   - ctx context.Context
//   - i *domain.Investment
func (_e *InvestmentRepository_Expecter) AddInvestment(ctx interface{}, i interface{}) *InvestmentRepository_AddInvestment_Call {
	return &InvestmentRepository_AddInvestment_Call{Call: _e.mock.On("AddInvestment", ctx, i)}
}

func (_c *InvestmentRepository_AddInvestment_Call) Run(run func(ctx context.Context, i *domain.Investment)) *InvestmentRepository_AddInvestment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Investment))
	})
	return _c
}

func (_c *InvestmentRepository_AddInvestment_Call) Return(_a0 error) *InvestmentRepository_AddInvestment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvestmentRepository_AddInvestment_Call) RunAndReturn(run func(context.Context, *domain.Investment) error) *InvestmentRepository_AddInvestment_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvestorsByLoan provides a mock function with given fields: ctx, loanID
func (_m *InvestmentRepository) GetInvestorsByLoan(ctx context.Context, loanID int) ([]domain.Investment, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestorsByLoan")
	}

	var r0 []domain.Investment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.Investment, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.Investment); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Investment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvestmentRepository_GetInvestorsByLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvestorsByLoan'
type InvestmentRepository_GetInvestorsByLoan_Call struct {
	*mock.Call
}

// GetInvestorsByLoan is a helper method to define mock.On call
//   - ctx context.Context
//   - loanID int
func (_e *InvestmentRepository_Expecter) GetInvestorsByLoan(ctx interface{}, loanID interface{}) *InvestmentRepository_GetInvestorsByLoan_Call {
	return &InvestmentRepository_GetInvestorsByLoan_Call{Call: _e.mock.On("GetInvestorsByLoan", ctx, loanID)}
}

func (_c *InvestmentRepository_GetInvestorsByLoan_Call) Run(run func(ctx context.Context, loanID int)) *InvestmentRepository_GetInvestorsByLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *InvestmentRepository_GetInvestorsByLoan_Call) Return(_a0 []domain.Investment, _a1 error) *InvestmentRepository_GetInvestorsByLoan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvestmentRepository_GetInvestorsByLoan_Call) RunAndReturn(run func(context.Context, int) ([]domain.Investment, error)) *InvestmentRepository_GetInvestorsByLoan_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalInvested provides a mock function with given fields: ctx, loanID
func (_m *InvestmentRepository) GetTotalInvested(ctx context.Context, loanID int) (float64, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalInvested")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (float64, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) float64); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvestmentRepository_GetTotalInvested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalInvested'
type InvestmentRepository_GetTotalInvested_Call struct {
	*mock.Call
}

// GetTotalInvested is a helper method to define mock.On call
//   - ctx context.Context
//   - loanID int
func (_e *InvestmentRepository_Expecter) GetTotalInvested(ctx interface{}, loanID interface{}) *InvestmentRepository_GetTotalInvested_Call {
	return &InvestmentRepository_GetTotalInvested_Call{Call: _e.mock.On("GetTotalInvested", ctx, loanID)}
}

func (_c *InvestmentRepository_GetTotalInvested_Call) Run(run func(ctx context.Context, loanID int)) *InvestmentRepository_GetTotalInvested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *InvestmentRepository_GetTotalInvested_Call) Return(_a0 float64, _a1 error) *InvestmentRepository_GetTotalInvested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvestmentRepository_GetTotalInvested_Call) RunAndReturn(run func(context.Context, int) (float64, error)) *InvestmentRepository_GetTotalInvested_Call {
	_c.Call.Return(run)
	return _c
}

// NewInvestmentRepository creates a new instance of InvestmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvestmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvestmentRepository {
	mock := &InvestmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
